// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ziyadovea/todo-app/models"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(arg0 *models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), arg0)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), arg0, arg1)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), arg0)
}

// MockTodoList is a mock of TodoList interface.
type MockTodoList struct {
	ctrl     *gomock.Controller
	recorder *MockTodoListMockRecorder
}

// MockTodoListMockRecorder is the mock recorder for MockTodoList.
type MockTodoListMockRecorder struct {
	mock *MockTodoList
}

// NewMockTodoList creates a new mock instance.
func NewMockTodoList(ctrl *gomock.Controller) *MockTodoList {
	mock := &MockTodoList{ctrl: ctrl}
	mock.recorder = &MockTodoListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoList) EXPECT() *MockTodoListMockRecorder {
	return m.recorder
}

// CreateNewList mocks base method.
func (m *MockTodoList) CreateNewList(arg0 int, arg1 *models.TodoList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewList", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewList indicates an expected call of CreateNewList.
func (mr *MockTodoListMockRecorder) CreateNewList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewList", reflect.TypeOf((*MockTodoList)(nil).CreateNewList), arg0, arg1)
}

// DeleteAllLists mocks base method.
func (m *MockTodoList) DeleteAllLists(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllLists", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllLists indicates an expected call of DeleteAllLists.
func (mr *MockTodoListMockRecorder) DeleteAllLists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllLists", reflect.TypeOf((*MockTodoList)(nil).DeleteAllLists), arg0)
}

// DeleteListByID mocks base method.
func (m *MockTodoList) DeleteListByID(arg0, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListByID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListByID indicates an expected call of DeleteListByID.
func (mr *MockTodoListMockRecorder) DeleteListByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListByID", reflect.TypeOf((*MockTodoList)(nil).DeleteListByID), arg0, arg1)
}

// GetAllLists mocks base method.
func (m *MockTodoList) GetAllLists(arg0 int) ([]*models.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLists", arg0)
	ret0, _ := ret[0].([]*models.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLists indicates an expected call of GetAllLists.
func (mr *MockTodoListMockRecorder) GetAllLists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLists", reflect.TypeOf((*MockTodoList)(nil).GetAllLists), arg0)
}

// GetListByID mocks base method.
func (m *MockTodoList) GetListByID(arg0, arg1 int) (*models.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByID", arg0, arg1)
	ret0, _ := ret[0].(*models.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByID indicates an expected call of GetListByID.
func (mr *MockTodoListMockRecorder) GetListByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByID", reflect.TypeOf((*MockTodoList)(nil).GetListByID), arg0, arg1)
}

// UpdateListByID mocks base method.
func (m *MockTodoList) UpdateListByID(arg0, arg1 int, arg2 *models.NewTodoList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateListByID indicates an expected call of UpdateListByID.
func (mr *MockTodoListMockRecorder) UpdateListByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListByID", reflect.TypeOf((*MockTodoList)(nil).UpdateListByID), arg0, arg1, arg2)
}

// MockTodoItem is a mock of TodoItem interface.
type MockTodoItem struct {
	ctrl     *gomock.Controller
	recorder *MockTodoItemMockRecorder
}

// MockTodoItemMockRecorder is the mock recorder for MockTodoItem.
type MockTodoItemMockRecorder struct {
	mock *MockTodoItem
}

// NewMockTodoItem creates a new mock instance.
func NewMockTodoItem(ctrl *gomock.Controller) *MockTodoItem {
	mock := &MockTodoItem{ctrl: ctrl}
	mock.recorder = &MockTodoItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoItem) EXPECT() *MockTodoItemMockRecorder {
	return m.recorder
}

// CreateNewItem mocks base method.
func (m *MockTodoItem) CreateNewItem(arg0, arg1 int, arg2 *models.TodoItem) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewItem indicates an expected call of CreateNewItem.
func (mr *MockTodoItemMockRecorder) CreateNewItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewItem", reflect.TypeOf((*MockTodoItem)(nil).CreateNewItem), arg0, arg1, arg2)
}

// DeleteAllItems mocks base method.
func (m *MockTodoItem) DeleteAllItems(arg0, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllItems", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllItems indicates an expected call of DeleteAllItems.
func (mr *MockTodoItemMockRecorder) DeleteAllItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllItems", reflect.TypeOf((*MockTodoItem)(nil).DeleteAllItems), arg0, arg1)
}

// DeleteItemByID mocks base method.
func (m *MockTodoItem) DeleteItemByID(arg0, arg1, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItemByID indicates an expected call of DeleteItemByID.
func (mr *MockTodoItemMockRecorder) DeleteItemByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemByID", reflect.TypeOf((*MockTodoItem)(nil).DeleteItemByID), arg0, arg1, arg2)
}

// GetAllItems mocks base method.
func (m *MockTodoItem) GetAllItems(arg0, arg1 int) ([]*models.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems", arg0, arg1)
	ret0, _ := ret[0].([]*models.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockTodoItemMockRecorder) GetAllItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockTodoItem)(nil).GetAllItems), arg0, arg1)
}

// GetItemByID mocks base method.
func (m *MockTodoItem) GetItemByID(arg0, arg1, arg2 int) (*models.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByID indicates an expected call of GetItemByID.
func (mr *MockTodoItemMockRecorder) GetItemByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByID", reflect.TypeOf((*MockTodoItem)(nil).GetItemByID), arg0, arg1, arg2)
}

// UpdateItemByID mocks base method.
func (m *MockTodoItem) UpdateItemByID(arg0, arg1, arg2 int, arg3 *models.NewTodoItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemByID indicates an expected call of UpdateItemByID.
func (mr *MockTodoItemMockRecorder) UpdateItemByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemByID", reflect.TypeOf((*MockTodoItem)(nil).UpdateItemByID), arg0, arg1, arg2, arg3)
}
